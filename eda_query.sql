-- Explore All Objects in the Database
SELECT * FROM INFORMATION_SCHEMA.TABLES

-- Explore All Columns in the Database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS

-- Explore All Columns in a specific Table
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'dim_customers'

-- Explore All Countries our customers come from.
SELECT DISTINCT country FROM gold.dim_customers

-- Explore All Categories "The major Divisions"
SELECT DISTINCT category, subcategory, product_name FROM gold.dim_products
ORDER BY 1, 2, 3

-- Find the date of the first and last order
SELECT 
	MIN(order_date) as 'first_order_date', 
	MAX(order_date) as 'last_order_date' 
FROM gold.fact_sales

-- How many years of sales are available
SELECT 
	DATEDIFF(year, MIN(order_date), MAX(order_date)) AS 'order_range_years'
FROM gold.fact_sales

-- Find the age in years of the youngest and oldest customer
SELECT
	MIN(birthdate) AS 'oldest_birthdate',
	DATEDIFF(year,MIN(birthdate),GETDATE()) AS 'oldest_age',
	MAX(birthdate) AS 'youngest_birthdate',
	DATEDIFF(year,MAX(birthdate),GETDATE()) AS 'youngest_age'
FROM gold.dim_customers

-- Find the Total Sales
SELECT
	SUM(sales_amount) AS 'total_sales'
FROM gold.fact_sales;

-- Find how many items are sold
SELECT 
	SUM(quantity) AS 'total_quantity_sold'
FROM gold.fact_sales;

-- Find the average selling price
SELECT 
	AVG(price) AS 'avg_price'
FROM gold.fact_sales;

-- Find the Total number of Orders 
SELECT 
	COUNT(DISTINCT order_number) AS 'total_orders'
FROM gold.fact_sales;

-- Find the Total number of Products
SELECT 
	COUNT(product_key) AS 'total_products'
FROM gold.dim_products;

-- Find the Total number of Customers
SELECT 
	COUNT(customer_key) AS 'total_customers'
FROM gold.dim_customers;

-- Find the Total number of Customers that has placed an order
SELECT COUNT(DISTINCT customer_key) AS 'total_customers_placed_order'
FROM gold.fact_sales
WHERE order_date IS NOT NULL;

-- Generate a Report that shows all key metrics of the business
SELECT
	'Total Sales' as 'measure_name',
	SUM(sales_amount) AS 'measure_value'
FROM gold.fact_sales
UNION ALL
SELECT
	'Total Quantity Sold' as 'measure_name',
	SUM(quantity) AS 'measure_value'
FROM gold.fact_sales
UNION ALL
SELECT
	'Avg Price' as 'measure_name',
	AVG(price) AS 'measure_value'
FROM gold.fact_sales
UNION ALL
SELECT
	'Total Orders' as 'measure_name',
	COUNT(DISTINCT order_number) AS 'measure_value'
FROM gold.fact_sales
UNION ALL
SELECT
	'Total Products' as 'measure_name',
	COUNT(product_key) AS 'measure_value'
FROM gold.dim_products
UNION ALL
SELECT
	'Total Customers' as 'measure_name',
	COUNT(customer_key) AS 'measure_value'
FROM gold.dim_customers
UNION ALL
SELECT
	'Total Customers Placed Order' as 'measure_name',
	COUNT(customer_key) AS 'measure_value'
FROM gold.fact_sales
WHERE order_date IS NOT NULL;

-- Find total customers by countries 
SELECT
	country,
	COUNT(customer_key) AS 'total_customers_countries'
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers_countries DESC;

-- Find total customers by gender 
SELECT
	gender,
	COUNT(customer_key) AS 'total_customers_gender'
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers_gender DESC;

--Find total products by category  
SELECT
	category,
	COUNT(product_key) AS 'total_products_category'
FROM gold.dim_products
GROUP BY category
ORDER BY total_products_category DESC;

-- What is the average costs in each category?
SELECT
	category,
	AVG(cost) AS 'average_costs_category'
FROM gold.dim_products
GROUP BY category
ORDER BY average_costs_category DESC;

-- What is the total revenue generated for each category?
SELECT 
	p.category,
	SUM(s.sales_amount) AS 'revenue_generated' 
FROM gold.dim_products AS p
RIGHT JOIN gold.fact_sales AS s
ON p.product_key = s.product_key
GROUP BY p.category
ORDER BY revenue_generated DESC;

-- Find total revenue is generated by each customer
SELECT
	c.customer_key,
	c.first_name,
	c.last_name,
	SUM(f.sales_amount) AS 'customer_revenue'
FROM gold.fact_sales AS f
LEFT JOIN gold.dim_customers AS c
ON c.customer_key = f.customer_key
GROUP BY 
	c.customer_key,
	c.first_name,
	c.last_name
ORDER BY customer_revenue DESC;

-- What is the distribution of sold items across countries?
SELECT
	c.country,
	SUM(f.quantity) AS 'total_sold_items'
FROM gold.fact_sales AS f
LEFT JOIN gold.dim_customers AS c
ON c.customer_key = f.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC;

-- Which 5 products generate the highest revenue?
SELECT TOP 5
	p.product_name,
	SUM(f.sales_amount) AS 'total_revenue'
FROM gold.fact_sales AS f
LEFT JOIN gold.dim_products AS p
ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC;

-- Which 5 products generate the highest revenue? (Window Functions Version)
SELECT * 
FROM(
SELECT
	p.product_name,
	SUM(f.sales_amount) AS 'total_revenue',
	ROW_NUMBER() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_product
FROM gold.fact_sales AS f
LEFT JOIN gold.dim_products AS p
ON p.product_key = f.product_key
GROUP BY p.product_name
) AS temp
WHERE rank_product <= 5


--What are the 5 worst-performing products in terms of sales?
SELECT TOP 5
	p.product_name,
	SUM(f.sales_amount) AS 'total_revenue'
FROM gold.fact_sales AS f
LEFT JOIN gold.dim_products AS p
ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue ASC;

-- What are the 5 worst-performing products in terms of sales? (Window Functions Version)
SELECT *
FROM (
SELECT
	p.product_name,
	SUM(f.sales_amount) AS 'total_revenue',
	ROW_NUMBER() OVER (ORDER BY SUM(f.sales_amount) ASC) AS rank_revenue
FROM gold.fact_sales AS f
LEFT JOIN gold.dim_products AS p
ON p.product_key = f.product_key
GROUP BY p.product_name
) AS temp
WHERE rank_revenue <= 5;



-- Find the top 10 customers who have generated the highest revenue
SELECT TOP 10
	c.customer_key,
	c.first_name,
	c.last_name,
	SUM(f.sales_amount) AS 'customer_revenue'
FROM gold.fact_sales AS f
LEFT JOIN gold.dim_customers AS c
ON c.customer_key = f.customer_key
GROUP BY 
	c.customer_key,
	c.first_name,
	c.last_name
ORDER BY customer_revenue DESC;

-- The 3 customers with the fewest orders placed
SELECT TOP 3
	c.customer_key,
	c.first_name,
	c.last_name,
	COUNT(DISTINCT order_number) AS 'total_orders'
FROM gold.fact_sales AS f
LEFT JOIN gold.dim_customers AS c
ON c.customer_key = f.customer_key
GROUP BY 
	c.customer_key,
	c.first_name,
	c.last_name
ORDER BY total_orders;